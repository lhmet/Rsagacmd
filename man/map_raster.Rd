% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_raster.R
\name{map_raster}
\alias{map_raster}
\alias{map2_raster}
\title{Apply a raster geoprocessing function to a list of raster data sets and
mosaic the results}
\usage{
map_raster(.x, .f, filename = NULL, mosaic_opts = NULL, ...)

map2_raster(.x, .y, .f, filename = NULL, mosaic_opts = NULL, ...)
}
\arguments{
\item{.x}{A list of data sets to pass to the geoprocessing function.}

\item{.f}{A function or a formula that returns either a `RasterLayer` or
  `SpatRaster` raster object, depending on whether the inputs to the function
  are using the currently supported `raster` or `terra` backends.
  
  If .f is a  *function* then it is used as it.
  
  If .f is a *formula*, e.g. 
  `~ saga$ta_morphometry$terrain_ruggedness_index(dem = .x)` then it is
  converted to a function.
  \itemize{
  \item For a single argument to the function using `map_raster` then use `.x`.
  \item For two inputs to a function when using `map2_raster` then use `.x` and
  `.y`
  }

  Additional arguments are passed to the function using the `...`.

  A saga_cmd tool generated by `Rsagacmd::saga_gis()` can also be wrapped
  inside another function to fix arguments or select specific processing
  outputs, i.e. to remove non-raster based outputs that are also produced by
  a tool.}

\item{filename}{A character to optionally specify the path to save the final
mosaicked result. If `filename = NULL` then `tempdir()` is used.}

\item{mosaic_opts}{Additional arguments to pass to the `raster::mosaic`
function. This can include `fun = mean` to take the mean pixel value of
overlapping areas, or another function. It can also include arguments which
are passed to the `raster::writeRaster` function, such as `NAflag`,
`options` etc.}

\item{...}{Additional arguments to pass to `.f`.}
}
\value{
Either a `RasterLayer` or `SpatRaster` object depending on which
  package was used to provide the input to the `map_raster` function.
}
\description{
A 'purrr::map' style function to iterate over a list of datasets and apply a
geoprocessing tool to each input The output raster grids are mosaicked into a
new raster data set. The `map_raster` function can help to conveniently apply
terrain analysis tools to lists of datasets. One potential application is to
use tiling to handle raster datasets that are too large to fit into memory,
and when the
`saga_gis(grid_caching = TRUE)` option is too slow because caching in
SAGA-GIS only supports single-thread processing. The input tiles can
potentially generated using the `Rsagacmd::tile_geoprocessor` tool or other
functions that split a dataset into parts.
}
\examples{
\dontrun{
library(Rsagacmd)
library(terra)

saga <- saga_gis(backend = "terra")

# generate a dem and split into tiles
dem <- saga$grid_calculus$random_terrain()
dem_tiles <- tile_geoprocessor(saga, dem, nx = 25, ny = 25)

# apply a saga tool function to each tile
tile_output <- map_raster(
    dem_tiles, 
    saga$ta_morphometry$terrain_ruggedness_index
)

# alternatively use a partial function to set arguments to the tool
tri_func <- function(dem) {
    saga$ta_morphometry$terrain_ruggedness_index(
        dem = dem, 
        radius = 7
     )
}

tile_output <- map_raster(dem_tiles, tri_func)

# if the saga tool produces multiple outputs then each output will be
# mosaicked automatically and returned as a list of raster datasets
tile_output <- map_raster(
    dem_tiles, 
    saga$ta_hydrology$saga_wetness_index
)
}
}
