% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_raster.R
\name{map2_raster}
\alias{map2_raster}
\title{Apply a saga_cmd tool over over a list of raster datasets and mosaick the
results}
\usage{
map2_raster(.x, .y, .f, filename = NULL, gdal_options = NULL, ...)
}
\arguments{
\item{.x}{A list.}

\item{.y}{A list.}

\item{.f}{A saga_cmd function that was generated by `Rsagacmd::saga_gis()` to
apply to each raster dataset in `.x`. The function can be used as it, such
as `saga$ta_morphometry$terrain_ruggedness_index` or can be wrapped inside
another as a partial function to set arguments to the tool or select
specific tool outputs.}

\item{filename}{A character to optionally specify the path to save the final
mosaicked result. If `filename = NULL` then `tempdir()` is used.}

\item{gdal_options}{Additional arguments to pass to the `raster::writeRaster` function.}

\item{...}{Additional arguments to pass to `.f`.}
}
\value{
Either a `raster::RasterLayer` or `terra::SpatRaster` object.
}
\description{
A `purrr::map2` style function to iterate over a list of raster datasets and
apply a saga_cmd tool to each raster. The output grids are automatically
mosaicked into a new raster dataset. The `map_raster` function is can help
with conveniently applying terrain analysis functions to lists of rasters.
One potential application is using tiling to deal with raster datasets that
are too large to fit into memory, and when the
`saga_gis(grid_caching = TRUE)` option is too slow. The tiles can potentially
generated using the `Rsagacmd::tile_geoprocessor` tool, or other functions
that split a dataset.
pck
}
\examples{
\dontrun{
library(Rsagacmd)
library(terra)

saga <- saga_gis(backend = "terra")

# generate a dem and split into tiles
dem <- saga$grid_calculus$random_terrain()
dem_tiles <- tile_geoprocessor(saga, dem, nx = 25, ny = 25)

# apply a saga tool function to each tile
tile_output <- map_raster(
    dem_tiles, 
    saga$ta_morphometry$terrain_ruggedness_index
)

# alternatively use a partial function to set arguments to the tool
tri_func <- function(dem) {
    saga$ta_morphometry$terrain_ruggedness_index(
        dem = dem, 
        radius = 7
     )
}

tile_output <- map_raster(dem_tiles, tri_func)

# if the saga tool produces multiple outputs then each output will be
# mosaicked automatically and returned as a list of raster datasets
tile_output <- map_raster(
    dem_tiles, 
    saga$ta_hydrology$saga_wetness_index
)
}
}
